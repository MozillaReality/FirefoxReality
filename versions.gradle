/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
* Shared file between builds so that they can all use the same dependencies and
* maven repositories.
**/
ext.deps = [:]
def versions = [:]
// GeckoView versions can be found here:
// https://maven.mozilla.org/?prefix=maven2/org/mozilla/geckoview/
versions.gecko_view = "74.0.20200107215758"
versions.android_components = "28.0.1"
// Note that android-components also depends on application-services,
// and in fact is our main source of appservices-related functionality.
// The version number below tracks the application-services version
// that we depend on directly for the fenix-megazord (and for it's
// forUnitTest variant), and it's important that it be kept in
// sync with the version used by android-components above.
versions.mozilla_appservices = "0.48.2"
versions.mozilla_speech = "1.0.9"
versions.openwnn = "1.3.7"
versions.google_vr = "1.190.0"
versions.room = "2.2.0"
versions.lifecycle = "2.0.0"
versions.support = "1.0.0"
versions.recyclerview = "1.1.0"
versions.constraint_layout = "2.0.0-beta2"
versions.testing = "1.2.1-alpha02"
versions.uiautomator = "2.2.0"
versions.atsl_core = "1.2.0"
versions.atsl = "1.3.0-alpha02"
versions.junit = "4.12"
versions.espresso = "3.2.0"
versions.android_gradle_plugin = "3.4.1"
versions.kotlin = "1.3.31"
versions.kotlin_coroutines = "1.2.1"
versions.snakeyaml = "1.24"
versions.gson = "2.8.5"
versions.robolectric = "4.2.1"
versions.work = "2.2.0"
versions.telemetry = "24.1.0"
ext.versions = versions

def deps = [:]

def gecko_view = [:]
gecko_view.nightly_armv7a = "org.mozilla.geckoview:geckoview-nightly-armeabi-v7a:$versions.gecko_view"
gecko_view.nightly_arm64 = "org.mozilla.geckoview:geckoview-nightly-arm64-v8a:$versions.gecko_view"
gecko_view.nightly_x86_64 = "org.mozilla.geckoview:geckoview-nightly-x86_64:$versions.gecko_view"
deps.gecko_view = gecko_view

def android_components = [:]
android_components.telemetry = "org.mozilla.components:service-telemetry:$versions.android_components"
android_components.glean = "org.mozilla.components:service-glean:$versions.android_components"
android_components.browser_errorpages = "org.mozilla.components:browser-errorpages:$versions.android_components"
android_components.browser_search = "org.mozilla.components:browser-search:$versions.android_components"
android_components.browser_storage = "org.mozilla.components:browser-storage-sync:$versions.android_components"
android_components.browser_domains = "org.mozilla.components:browser-domains:$versions.android_components"
android_components.service_accounts = "org.mozilla.components:service-firefox-accounts:$versions.android_components"
android_components.ui_autocomplete = "org.mozilla.components:ui-autocomplete:$versions.android_components"
android_components.concept_fetch = "org.mozilla.components:concept-fetch:$versions.android_components"
android_components.lib_fetch = "org.mozilla.components:lib-fetch-httpurlconnection:$versions.android_components"
android_components.support_rustlog = "org.mozilla.components:support-rustlog:$versions.android_components"
android_components.support_rusthttp = "org.mozilla.components:support-rusthttp:$versions.android_components"
android_components.support_test = "org.mozilla.components:support-test:$versions.android_components"
deps.android_components = android_components

def app_services = [:]
app_services.megazord = "org.mozilla.appservices:fenix-megazord:${versions.mozilla_appservices}"
app_services.megazord_forUnitTests = "org.mozilla.appservices:fenix-megazord-forUnitTests:${versions.mozilla_appservices}"
app_services.rustlog = "org.mozilla.appservices:rustlog:${versions.mozilla_appservices}"
deps.app_services = app_services

deps.mozilla_speech = "com.github.mozilla:mozillaspeechlibrary:$versions.mozilla_speech"

deps.openwnn = "jp.co.omronsoft.openwnn:openwnn:$versions.openwnn"

def google_vr = [:]
google_vr.sdk_base = "com.google.vr:sdk-base:$versions.google_vr"
google_vr.sdk_audio = "com.google.vr:sdk-audio:$versions.google_vr"
deps.google_vr = google_vr

def support = [:]
support.annotations = "androidx.annotation:annotation:$versions.support"
support.app_compat = "androidx.appcompat:appcompat:$versions.support"
support.recyclerview = "androidx.recyclerview:recyclerview:$versions.recyclerview"
support.cardview = "androidx.cardview:cardview:$versions.support"
support.design = "com.google.android.material:material:$versions.support"
support.v4 = "androidx.legacy:legacy-support-v4:$versions.support"
support.core_utils = "androidx.legacy:legacy-support-core-utils:$versions.support"
support.vector_drawable = "androidx.vectordrawable:vectordrawable:$versions.support"
deps.support = support

// TODO this should not be necessary at all, see Services.kt
def work = [:]
work.runtime = "androidx.work:work-runtime-ktx:$versions.work"
work.testing = "androidx.work:work-testing:$versions.work"
deps.work = work

def room = [:]
room.runtime = "androidx.room:room-runtime:$versions.room"
room.compiler = "androidx.room:room-compiler:$versions.room"
room.testing = "androidx.room:room-testing:$versions.room"
deps.room = room

def lifecycle = [:]
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:$versions.lifecycle"
lifecycle.extensions = "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
deps.lifecycle = lifecycle

def espresso = [:]
espresso.core = "androidx.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "androidx.test.espresso:espresso-contrib:$versions.espresso"
espresso.intents = "androidx.test.espresso:espresso-intents:$versions.espresso"
espresso.idling_resources = "androidx.test.espresso:espresso-idling-resource:$versions.espresso"
deps.espresso = espresso

def atsl = [:]
atsl.core = "androidx.test:core-ktx:$versions.testing"
atsl.runner = "androidx.test:runner:$versions.atsl"
atsl.rules = "androidx.test:rules:$versions.atsl"
atsl.orchestrator = "androidx.test:orchestrator:$versions.atsl"
deps.atsl = atsl

def testing = [:]
testing.core = "androidx.test:core:$versions.testing"
testing.uiautomator = "androidx.test.uiautomator:uiautomator:${versions.uiautomator}"
deps.testing = testing

def sqlite = [:]
sqlite.sqlite = 'com.readystatesoftware.sqliteasset:sqliteassethelper:2.0.1'
deps.sqlite = sqlite

def disklrucache = [:]
disklrucache.disklrucache = 'com.jakewharton:disklrucache:2.0.2'
deps.disklrucache = disklrucache

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
kotlin.coroutines = "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlin_coroutines"
kotlin.coroutines_jdk8 = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$versions.kotlin_coroutines"
deps.kotlin = kotlin

def telemetry = [:]
telemetry.glean_unittests = "org.mozilla.telemetry:glean-forUnitTests:$versions.telemetry"
deps.telemetry = telemetry

deps.constraint_layout = "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"

deps.junit = "junit:junit:$versions.junit"

deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"

deps.android_components_version = versions.android_components

deps.snakeyaml = "org.yaml:snakeyaml:$versions.snakeyaml:android"

deps.gson = "com.google.code.gson:gson:$versions.gson"

deps.robolectric = "org.robolectric:robolectric:$versions.robolectric"

ext.deps = deps

def build_versions = [:]
build_versions.min_sdk = 24
build_versions.min_sdk_wave = 25
build_versions.target_sdk = 28
build_versions.build_tools = "28.0.3"
ext.build_versions = build_versions

ext.deps = deps

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    handler.maven { url 'https://maven.mozilla.org/maven2' }
    handler.maven { url 'https://download.servo.org/nightly/maven' }
}
ext.addRepos = this.&addRepos
