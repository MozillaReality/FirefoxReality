plugins {
    id "com.jetbrains.python.envs" version "0.0.26"
}

apply plugin: 'com.android.application'
apply from: "$project.rootDir/tools/gradle/versionCode.gradle"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "org.mozilla.telemetry.glean-gradle-plugin"

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getCrashRestartDisabled = { ->
    if (gradle.hasProperty("userProperties.disableCrashRestart")) {
        return gradle."userProperties.disableCrashRestart"
    }
    return "false"
}

def getDevApplicationIdSuffix = { ->
    if (gradle.hasProperty("userProperties.simultaneousDevProduction")) {
        return gradle."userProperties.simultaneousDevProduction" == "true" ? ".dev" : ""
    }
    return ""
}

def getUseDebugSigningOnRelease = { ->
    if (gradle.hasProperty("userProperties.useDebugSigningOnRelease")) {
        return gradle."userProperties.useDebugSigningOnRelease" == "true"
    }
    return false
}

// Glean: Generate markdown docs for the collected metrics.
ext.gleanGenerateMarkdownDocs = true
ext.gleanDocsDirectory = "$rootDir/docs"

android {
    compileSdkVersion build_versions.target_sdk
    defaultConfig {
        applicationId "org.mozilla.vrbrowser"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "9"
        buildConfigField "String", "GIT_HASH", "\"${getGitHash()}\""
        buildConfigField "Boolean", "DISABLE_CRASH_RESTART", getCrashRestartDisabled()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++14 -fexceptions -frtti -Werror" +
                         " -I" + file("src/main/cpp").absolutePath +
                         " -I" + file("src/main/cpp/vrb/include").absolutePath
                arguments "-DANDROID_STL=c++_shared"
            }
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }

    }

    if (gradle.hasProperty('userProperties.taskclusterBuild')) {
        project.archivesBaseName = "FirefoxReality-$defaultConfig.versionName-$generatedVersionCode"
        defaultConfig.versionCode = generatedVersionCode
    } else {
        project.archivesBaseName = "FirefoxReality"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig getUseDebugSigningOnRelease() ? debug.signingConfig : release.signingConfig
        }
        debug {
            applicationIdSuffix getDevApplicationIdSuffix()
            pseudoLocalesEnabled true
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        disable "ExtraTranslation"
    }

    packagingOptions {
        pickFirst '/lib/*/libgvr.so'
    }

    flavorDimensions "platform", "abi"

    productFlavors {
        // Supported platforms
        googlevr {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/gvr-android-sdk/libraries/headers").absolutePath +
                            " -DVRBROWSER_GOOGLEVR"
                    arguments "-DVR_SDK_LIB=googlevr-lib", "-DGOOGLEVR=ON"
                }
            }
        }

        oculusvr {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/ovr_mobile/VrApi/Include").absolutePath +
                            " -I" + file("${project.rootDir}/third_party/OVRPlatformSDK/Include").absolutePath +
                            " -I" + file("${project.rootDir}/app/src/oculusvr/cpp").absolutePath +
                            " -DOCULUSVR -DSTORE_BUILD=0"
                    arguments "-DVR_SDK_LIB=oculusvr-lib", "-DVR_SDK_EXTRA_LIB=ovrplatform-lib", "-DOCULUSVR=ON"
                }
            }
            manifestPlaceholders = [ headtrackingRequired:"false", permissionToRemove:"android.permission.RECEIVE_BOOT_COMPLETED" ]
        }

        oculusvrStore {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/ovr_mobile/VrApi/Include").absolutePath +
                            " -I" + file("${project.rootDir}/third_party/OVRPlatformSDK/Include").absolutePath +
                            " -I" + file("${project.rootDir}/app/src/oculusvr/cpp").absolutePath +
                            " -DOCULUSVR -DSTORE_BUILD=1"
                    arguments "-DVR_SDK_LIB=oculusvr-lib", "-DVR_SDK_EXTRA_LIB=ovrplatform-lib", "-DOCULUSVR=ON"
                }
            }
            manifestPlaceholders = [ headtrackingRequired:"false", permissionToRemove:"android.permission.RECEIVE_BOOT_COMPLETED" ]
        }

        oculusvr3dofStore {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/ovr_mobile/VrApi/Include").absolutePath +
                            " -I" + file("${project.rootDir}/third_party/OVRPlatformSDK/Include").absolutePath +
                            " -I" + file("${project.rootDir}/app/src/oculusvr/cpp").absolutePath +
                            " -DOCULUSVR -DSTORE_BUILD=1"
                    arguments "-DVR_SDK_LIB=oculusvr-lib", "-DVR_SDK_EXTRA_LIB=ovrplatform-lib", "-DOCULUSVR=ON"
                }
            }
            manifestPlaceholders = [ headtrackingRequired:"false", permissionToRemove:"android.permission.CAMERA" ]
        }

        svr {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/svr/public").absolutePath +
                            " -I" + file("${project.rootDir}/app/src/svr/cpp").absolutePath +
                            " -DSNAPDRAGONVR"
                    arguments "-DVR_SDK_LIB=svr-lib", "-DSNAPDRAGONVR=ON"
                }
            }
        }

        wavevr {
            minSdkVersion build_versions.min_sdk_wave
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/wavesdk/build/wvr_client/include").absolutePath +
                            " -DWAVEVR"
                    arguments "-DVR_SDK_LIB=wavevr-lib", "-DWAVEVR=ON"
                }
            }
            applicationIdSuffix ".wavevr"
        }

        wavevrStore {
            minSdkVersion build_versions.min_sdk_wave
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -I" + file("${project.rootDir}/third_party/wavesdk/build/wvr_client/include").absolutePath +
                            " -DWAVEVR"
                    arguments "-DVR_SDK_LIB=wavevr-lib", "-DWAVEVR=ON"
                }
            }
        }

        picovr {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -DPICOVR"
                    arguments "-DVR_SDK_LIB=picovr-lib", "-DPICOVR=ON"
                }
            }
        }

        noapi {
            dimension "platform"
            externalNativeBuild {
                cmake {
                    cppFlags " -DVRBROWSER_NO_VR_API"
                    arguments "-DNOAPI=ON"
                }
            }
        }

        // Supported ABIs
        arm {
            dimension "abi"
            ndk {
                abiFilters "armeabi-v7a"
            }
        }

        arm64 {
            dimension "abi"
            ndk {
                abiFilters "arm64-v8a"
            }
        }

        x86_64 {
            dimension "abi"
            ndk {
                abiFilters "x86_64"
            }
        }
    }

    variantFilter { variant ->
        def needed = variant.name in [
                'googlevrArmDebug',
                'googlevrArmRelease',
                'googlevrArm64Debug',
                'googlevrArm64Release',
                'oculusvrArmDebug',
                'oculusvrArmRelease',
                'oculusvrArm64Debug',
                'oculusvrArm64Release',
                'oculusvrStoreArmDebug',
                'oculusvrStoreArmRelease',
                'oculusvrStoreArm64Debug',
                'oculusvrStoreArm64Release',
                'oculusvr3dofStoreArmDebug',
                'oculusvr3dofStoreArmRelease',
                'oculusvr3dofStoreArm64Debug',
                'oculusvr3dofStoreArm64Release',
                'svrArmDebug',
                'svrArmRelease',
                'svrArm64Debug',
                'svrArm64Release',
                'picovrArm64Debug',
                'picovrArm64Release',
                'wavevrArmDebug',
                'wavevrArmRelease',
                'wavevrArm64Debug',
                'wavevrArm64Release',
                'wavevrStoreArmDebug',
                'wavevrStoreArmRelease',
                'wavevrStoreArm64Debug',
                'wavevrStoreArm64Release',
                'noapiArmDebug',
                'noapiArmRelease',
                'noapiArm64Debug',
                'noapiArm64Release',
                'noapiX86_64Debug',
                'noapiX86_64Release'
        ]
        variant.setIgnore(!needed)
    }


    sourceSets {
        main {
            java.srcDirs = [
                    'app',
                    'src/common/shared',
                    'src/main/cpp/vrb/android/java'
            ]
        }

        release {
            manifest.srcFile getUseDebugSigningOnRelease() ? "src/debug/AndroidManifest.xml"
                                                           : manifest.srcFile

        }

        googlevr {
            java.srcDirs = [
                    'src/googlevr/java'
            ]
        }

        oculusvr {
            java.srcDirs = [
                    'src/oculusvr/java'
            ]
        }

        oculusvrStore {
            java.srcDirs = [
                    'src/oculusvr/java'
            ]
            assets.srcDirs = [
                    'src/oculusvr/assets'
            ]
        }

        oculusvr3dofStore {
            java.srcDirs = [
                    'src/oculusvr/java'
            ]
            assets.srcDirs = [
                    'src/oculusvr/assets'
            ]
        }

        oculusvrArmRelease {
            manifest.srcFile getUseDebugSigningOnRelease() ? "src/oculusvrArmDebug/AndroidManifest.xml"
                                                           :  manifest.srcFile
        }

        oculusvrArm64Debug {
            manifest.srcFile "src/oculusvrArmDebug/AndroidManifest.xml"
        }

        oculusvrArm64Release {
            manifest.srcFile getUseDebugSigningOnRelease() ? "src/oculusvrArmDebug/AndroidManifest.xml"
                                                           : "src/oculusvrArmRelease/AndroidManifest.xml"
        }

        oculusvrStoreArmDebug {
            manifest.srcFile "src/oculusvrArmDebug/AndroidManifest.xml"
        }

        oculusvrStoreArm64Debug {
            manifest.srcFile "src/oculusvrArmDebug/AndroidManifest.xml"
        }

        oculusvrStoreArmRelease {
            manifest.srcFile getUseDebugSigningOnRelease() ? "src/oculusvrArmDebug/AndroidManifest.xml"
                    : "src/oculusvrArmRelease/AndroidManifest.xml"
        }

        oculusvrStoreArm64Release {
            manifest.srcFile getUseDebugSigningOnRelease() ? "src/oculusvrArmDebug/AndroidManifest.xml"
                    : "src/oculusvrArmRelease/AndroidManifest.xml"
        }

        oculusvr3dofStoreArmDebug {
            manifest.srcFile "src/oculusvrArmDebug/AndroidManifest.xml"
        }

        oculusvr3dofStoreArm64Debug {
            manifest.srcFile "src/oculusvrArmDebug/AndroidManifest.xml"
        }

        oculusvr3dofStoreArmRelease {
            manifest.srcFile getUseDebugSigningOnRelease() ? "src/oculusvrArmDebug/AndroidManifest.xml"
                    : "src/oculusvrArmRelease/AndroidManifest.xml"
        }

        oculusvr3dofStoreArm64Release {
            manifest.srcFile getUseDebugSigningOnRelease() ? "src/oculusvrArmDebug/AndroidManifest.xml"
                    : "src/oculusvrArmRelease/AndroidManifest.xml"
        }

        svr {
            java.srcDirs = [
                    'src/svr/java'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/svr/libs"]
        }

        wavevr {
            java.srcDirs = [
                    'src/wavevr/java'
            ]
            res.srcDirs = [
                    'src/wavevr/res'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/wavesdk/build/wvr_client/jni"]
        }

        wavevrStore {
            java.srcDirs = [
                    'src/wavevr/java'
            ]
            res.srcDirs = [
                    'src/wavevr/res'
            ]
            assets.srcDirs = [
                    'src/wavevr/assets'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/wavesdk/build/wvr_client/jni"]
            manifest.srcFile "src/wavevr/AndroidManifest.xml"
        }

        picovr {
            java.srcDirs = [
                    'src/picovr/java'
            ]
            jniLibs.srcDirs = ["${project.rootDir}/third_party/picovr"]
        }

        noapi {
            java.srcDirs = [
                    'src/noapi/java'
            ]
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }
}

configurations {
    armImplementation
    x86Implementation
    all*.exclude group: 'androidx.appcompat', module: 'appcompat'
}

repositories {
    flatDir {
        dirs 'aars'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation deps.openwnn

    // Common
    // implementation deps.google_vr.sdk_audio
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.support.cardview
    implementation deps.support.recyclerview
    //implementation deps.support.app_compat
    implementation(name:'appcompat', ext:'aar')
    implementation deps.support.vector_drawable
    implementation deps.support.annotations
    implementation deps.constraint_layout
    implementation deps.gson
    implementation deps.room.runtime
    annotationProcessor deps.room.compiler

    // Android Components
    implementation deps.mozilla_speech
    implementation deps.android_components.telemetry
    implementation deps.android_components.browser_errorpages
    implementation deps.android_components.browser_search
    implementation deps.android_components.browser_storage
    implementation deps.android_components.browser_domains
    implementation deps.android_components.service_accounts
    implementation deps.android_components.ui_autocomplete
    implementation deps.android_components.concept_fetch
    implementation deps.android_components.lib_fetch
    implementation deps.android_components.support_rustlog
    implementation deps.android_components.support_rusthttp
    implementation deps.android_components.glean
    implementation deps.app_services.rustlog

    // For production builds, the native code for all `org.mozilla.appservices`
    // dependencies gets compiled together into a single "megazord" build, and
    // different megazords are published for different subsets of features. Ref
    // https://mozilla.github.io/application-services/docs/applications/consuming-megazord-libraries.html
    // For now we can jut use the one that's specifically designed for Fenix.
    implementation deps.app_services.megazord
    modules {
        module('org.mozilla.appservices:full-megazord') {
            replacedBy('org.mozilla.appservices:fenix-megazord', 'prefer the fenix megazord, to reduce final application size')
        }
    }

    // TODO this should not be necessary at all, see Services.kt
    implementation deps.work.runtime

    // TODO this should not be necessary at all, see Services.kt
    implementation deps.work.runtime

    // Kotlin dependency
    implementation deps.kotlin.stdlib
    implementation deps.kotlin.coroutines
    implementation deps.kotlin.coroutines_jdk8

    // SQLite helper to handle DBs from assets
    implementation deps.sqlite.sqlite

    // DiskLRUCache used to cache snapshots
    implementation deps.disklrucache.disklrucache

    // Testing
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.testing.uiautomator
    androidTestImplementation deps.testing.core
    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.espresso.idling_resources
    testImplementation deps.junit
    testImplementation deps.atsl.core
    testImplementation deps.robolectric
    testImplementation deps.app_services.megazord_forUnitTests
    testImplementation deps.app_services.rustlog
    testImplementation deps.android_components.support_test
    testImplementation deps.telemetry.glean_unittests
    testImplementation deps.work.testing

    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.rules

    androidTestImplementation "tools.fastlane:screengrab:2.0.0"

    androidTestUtil deps.atsl.orchestrator

    // Daydream
    googlevrImplementation deps.google_vr.sdk_base

    // ODG
    svrImplementation fileTree(dir: "${project.rootDir}/third_party/svr/", include: ['*.jar'])

    // Pico
    picovrImplementation fileTree(dir: "${project.rootDir}/third_party/picovr/", include: ['*.jar'])
}

if (findProject(':servo')) {
    dependencies {
      oculusvrImplementation project(':servo')
      googlevrImplementation project(':servo')
    }
}

if (findProject(':wavesdk')) {
    dependencies {
        wavevrImplementation project(':wavesdk')
        wavevrStoreImplementation project(':wavesdk')
    }
}

dependencies {
    // To see what the latest geckoview-nightly version is go here:
    // https://maven.mozilla.org/?prefix=maven2/org/mozilla/geckoview/geckoview-nightly-armeabi-v7a/
    armImplementation deps.gecko_view.nightly_armv7a
    arm64Implementation deps.gecko_view.nightly_arm64
    x86_64Implementation deps.gecko_view.nightly_x86_64
}

if (gradle.hasProperty('geckoViewLocalArm') || gradle.hasProperty('geckoViewLocalX86')) {
    throw new GradleException("geckoViewLocal{Arm,X86} are deprecated: use geckoViewLocalTopsrcdir and geckoViewLocalTopobjdir")
}

if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopsrcdir')) {
    if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopobjdir')) {
        ext.topobjdir = gradle."localProperties.dependencySubstitutions.geckoviewTopobjdir"
    }
    ext.topsrcdir = gradle."localProperties.dependencySubstitutions.geckoviewTopsrcdir"
    apply from: "${topsrcdir}/substitute-local-geckoview.gradle"
}

// -------------------------------------------------------------------------------------------------
//  Dynamically set versionCode (See tools/build/versionCode.gradle
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    def buildType = variant.buildType.name
    if (gradle.hasProperty('userProperties.taskclusterBuild')) {
        def versionCode = generatedVersionCode

        // The Google Play Store does not allow multiple APKs for the same app that all have the
        // same version code. Therefore we need to have different version codes for our ARM and x86
        // builds.
        // Our generated version code has a length of 8 (See tools/gradle/versionCode.gradle).
        // We will prefix our ARM builds with 1 and our x86 builds with 2. Our x86 builds need a
        // higher version code to avoid installing ARM builds on an x86 device with ARM
        // compatibility mode.
        def multiplier = 100000000

        if (variant.flavorName.contains("x86_64")) {
            versionCode = versionCode + (3 * multiplier)
        } else if (variant.flavorName.contains("Aarch64")) {
            versionCode = versionCode + (2 * multiplier)
        } else if (variant.flavorName.contains("Arm")) {
            versionCode = versionCode + (1 * multiplier)
        }

        variant.outputs.each { output ->
            output.versionCodeOverride = versionCode
        }
    }

    println("----------------------------------------------")
    println("Build type:   " + buildType)
    println("Flavor:       " + variant.flavorName)
    println("Version code: " + variant.mergedFlavor.versionCode)
}
